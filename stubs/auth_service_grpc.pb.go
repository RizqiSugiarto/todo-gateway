// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: auth_service.proto

package stubs

import (
	context "context"
	activity "github.com/digisata/todo-gateway/stubs/activity"
	task "github.com/digisata/todo-gateway/stubs/task"
	text "github.com/digisata/todo-gateway/stubs/text"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthService_Login_FullMethodName           = "/proto.AuthService/Login"
	AuthService_Logout_FullMethodName          = "/proto.AuthService/Logout"
	AuthService_CreateActivity_FullMethodName  = "/proto.AuthService/CreateActivity"
	AuthService_GetActivity_FullMethodName     = "/proto.AuthService/GetActivity"
	AuthService_GetAllActivity_FullMethodName  = "/proto.AuthService/GetAllActivity"
	AuthService_UpdateActivity_FullMethodName  = "/proto.AuthService/UpdateActivity"
	AuthService_DeleteActivity_FullMethodName  = "/proto.AuthService/DeleteActivity"
	AuthService_CreateTask_FullMethodName      = "/proto.AuthService/CreateTask"
	AuthService_GetTask_FullMethodName         = "/proto.AuthService/GetTask"
	AuthService_GetAllTask_FullMethodName      = "/proto.AuthService/GetAllTask"
	AuthService_UpdateTask_FullMethodName      = "/proto.AuthService/UpdateTask"
	AuthService_BatchUpdateTask_FullMethodName = "/proto.AuthService/BatchUpdateTask"
	AuthService_DeleteTask_FullMethodName      = "/proto.AuthService/DeleteTask"
	AuthService_CreateText_FullMethodName      = "/proto.AuthService/CreateText"
	AuthService_GetText_FullMethodName         = "/proto.AuthService/GetText"
	AuthService_GetAllText_FullMethodName      = "/proto.AuthService/GetAllText"
	AuthService_UpdateText_FullMethodName      = "/proto.AuthService/UpdateText"
	AuthService_DeleteText_FullMethodName      = "/proto.AuthService/DeleteText"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Auth
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthBaseResponse, error)
	// Activities
	CreateActivity(ctx context.Context, in *activity.CreateActivityRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error)
	GetActivity(ctx context.Context, in *activity.GetActivityByIDRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error)
	GetAllActivity(ctx context.Context, in *activity.GetAllActivityRequest, opts ...grpc.CallOption) (*activity.GetAllActivityResponse, error)
	UpdateActivity(ctx context.Context, in *activity.UpdateActivityByIDRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error)
	DeleteActivity(ctx context.Context, in *activity.DeleteActivityByIDRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error)
	// Taks
	CreateTask(ctx context.Context, in *task.CreateTaskRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error)
	GetTask(ctx context.Context, in *task.GetTaskByIDRequest, opts ...grpc.CallOption) (*task.GetTaskByIDResponse, error)
	GetAllTask(ctx context.Context, in *task.GetAllTaskByActivityIDRequest, opts ...grpc.CallOption) (*task.GetAllTaskByActivityIDResponse, error)
	UpdateTask(ctx context.Context, in *task.UpdateTaskByIDRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error)
	BatchUpdateTask(ctx context.Context, in *task.BatchUpdateTaskRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error)
	DeleteTask(ctx context.Context, in *task.DeleteTaskByIDRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error)
	// Text
	CreateText(ctx context.Context, in *text.CreateTextRequest, opts ...grpc.CallOption) (*text.TextBaseResponse, error)
	GetText(ctx context.Context, in *text.GetTextByIDRequest, opts ...grpc.CallOption) (*text.GetTextByIDResponse, error)
	GetAllText(ctx context.Context, in *text.GetAllTextByActivityIDRequest, opts ...grpc.CallOption) (*text.GetAllTextByActivityIDResponse, error)
	UpdateText(ctx context.Context, in *text.UpdateTextByIDRequest, opts ...grpc.CallOption) (*text.TextBaseResponse, error)
	DeleteText(ctx context.Context, in *text.DeleteTextByIDRequest, opts ...grpc.CallOption) (*text.TextBaseResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateActivity(ctx context.Context, in *activity.CreateActivityRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(activity.ActivityBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetActivity(ctx context.Context, in *activity.GetActivityByIDRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(activity.ActivityBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_GetActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAllActivity(ctx context.Context, in *activity.GetAllActivityRequest, opts ...grpc.CallOption) (*activity.GetAllActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(activity.GetAllActivityResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAllActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateActivity(ctx context.Context, in *activity.UpdateActivityByIDRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(activity.ActivityBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteActivity(ctx context.Context, in *activity.DeleteActivityByIDRequest, opts ...grpc.CallOption) (*activity.ActivityBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(activity.ActivityBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateTask(ctx context.Context, in *task.CreateTaskRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(task.TaskBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetTask(ctx context.Context, in *task.GetTaskByIDRequest, opts ...grpc.CallOption) (*task.GetTaskByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(task.GetTaskByIDResponse)
	err := c.cc.Invoke(ctx, AuthService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAllTask(ctx context.Context, in *task.GetAllTaskByActivityIDRequest, opts ...grpc.CallOption) (*task.GetAllTaskByActivityIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(task.GetAllTaskByActivityIDResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAllTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateTask(ctx context.Context, in *task.UpdateTaskByIDRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(task.TaskBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) BatchUpdateTask(ctx context.Context, in *task.BatchUpdateTaskRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(task.TaskBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_BatchUpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteTask(ctx context.Context, in *task.DeleteTaskByIDRequest, opts ...grpc.CallOption) (*task.TaskBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(task.TaskBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateText(ctx context.Context, in *text.CreateTextRequest, opts ...grpc.CallOption) (*text.TextBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(text.TextBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetText(ctx context.Context, in *text.GetTextByIDRequest, opts ...grpc.CallOption) (*text.GetTextByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(text.GetTextByIDResponse)
	err := c.cc.Invoke(ctx, AuthService_GetText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetAllText(ctx context.Context, in *text.GetAllTextByActivityIDRequest, opts ...grpc.CallOption) (*text.GetAllTextByActivityIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(text.GetAllTextByActivityIDResponse)
	err := c.cc.Invoke(ctx, AuthService_GetAllText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateText(ctx context.Context, in *text.UpdateTextByIDRequest, opts ...grpc.CallOption) (*text.TextBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(text.TextBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteText(ctx context.Context, in *text.DeleteTextByIDRequest, opts ...grpc.CallOption) (*text.TextBaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(text.TextBaseResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// Auth
	Login(context.Context, *LoginRequest) (*AuthBaseResponse, error)
	Logout(context.Context, *emptypb.Empty) (*AuthBaseResponse, error)
	// Activities
	CreateActivity(context.Context, *activity.CreateActivityRequest) (*activity.ActivityBaseResponse, error)
	GetActivity(context.Context, *activity.GetActivityByIDRequest) (*activity.ActivityBaseResponse, error)
	GetAllActivity(context.Context, *activity.GetAllActivityRequest) (*activity.GetAllActivityResponse, error)
	UpdateActivity(context.Context, *activity.UpdateActivityByIDRequest) (*activity.ActivityBaseResponse, error)
	DeleteActivity(context.Context, *activity.DeleteActivityByIDRequest) (*activity.ActivityBaseResponse, error)
	// Taks
	CreateTask(context.Context, *task.CreateTaskRequest) (*task.TaskBaseResponse, error)
	GetTask(context.Context, *task.GetTaskByIDRequest) (*task.GetTaskByIDResponse, error)
	GetAllTask(context.Context, *task.GetAllTaskByActivityIDRequest) (*task.GetAllTaskByActivityIDResponse, error)
	UpdateTask(context.Context, *task.UpdateTaskByIDRequest) (*task.TaskBaseResponse, error)
	BatchUpdateTask(context.Context, *task.BatchUpdateTaskRequest) (*task.TaskBaseResponse, error)
	DeleteTask(context.Context, *task.DeleteTaskByIDRequest) (*task.TaskBaseResponse, error)
	// Text
	CreateText(context.Context, *text.CreateTextRequest) (*text.TextBaseResponse, error)
	GetText(context.Context, *text.GetTextByIDRequest) (*text.GetTextByIDResponse, error)
	GetAllText(context.Context, *text.GetAllTextByActivityIDRequest) (*text.GetAllTextByActivityIDResponse, error)
	UpdateText(context.Context, *text.UpdateTextByIDRequest) (*text.TextBaseResponse, error)
	DeleteText(context.Context, *text.DeleteTextByIDRequest) (*text.TextBaseResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *emptypb.Empty) (*AuthBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) CreateActivity(context.Context, *activity.CreateActivityRequest) (*activity.ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (UnimplementedAuthServiceServer) GetActivity(context.Context, *activity.GetActivityByIDRequest) (*activity.ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivity not implemented")
}
func (UnimplementedAuthServiceServer) GetAllActivity(context.Context, *activity.GetAllActivityRequest) (*activity.GetAllActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActivity not implemented")
}
func (UnimplementedAuthServiceServer) UpdateActivity(context.Context, *activity.UpdateActivityByIDRequest) (*activity.ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivity not implemented")
}
func (UnimplementedAuthServiceServer) DeleteActivity(context.Context, *activity.DeleteActivityByIDRequest) (*activity.ActivityBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivity not implemented")
}
func (UnimplementedAuthServiceServer) CreateTask(context.Context, *task.CreateTaskRequest) (*task.TaskBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedAuthServiceServer) GetTask(context.Context, *task.GetTaskByIDRequest) (*task.GetTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedAuthServiceServer) GetAllTask(context.Context, *task.GetAllTaskByActivityIDRequest) (*task.GetAllTaskByActivityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTask not implemented")
}
func (UnimplementedAuthServiceServer) UpdateTask(context.Context, *task.UpdateTaskByIDRequest) (*task.TaskBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedAuthServiceServer) BatchUpdateTask(context.Context, *task.BatchUpdateTaskRequest) (*task.TaskBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateTask not implemented")
}
func (UnimplementedAuthServiceServer) DeleteTask(context.Context, *task.DeleteTaskByIDRequest) (*task.TaskBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedAuthServiceServer) CreateText(context.Context, *text.CreateTextRequest) (*text.TextBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateText not implemented")
}
func (UnimplementedAuthServiceServer) GetText(context.Context, *text.GetTextByIDRequest) (*text.GetTextByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedAuthServiceServer) GetAllText(context.Context, *text.GetAllTextByActivityIDRequest) (*text.GetAllTextByActivityIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllText not implemented")
}
func (UnimplementedAuthServiceServer) UpdateText(context.Context, *text.UpdateTextByIDRequest) (*text.TextBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateText not implemented")
}
func (UnimplementedAuthServiceServer) DeleteText(context.Context, *text.DeleteTextByIDRequest) (*text.TextBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteText not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(activity.CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateActivity(ctx, req.(*activity.CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(activity.GetActivityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetActivity(ctx, req.(*activity.GetActivityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAllActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(activity.GetAllActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAllActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAllActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAllActivity(ctx, req.(*activity.GetAllActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(activity.UpdateActivityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateActivity(ctx, req.(*activity.UpdateActivityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(activity.DeleteActivityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteActivity(ctx, req.(*activity.DeleteActivityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateTask(ctx, req.(*task.CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetTask(ctx, req.(*task.GetTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAllTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.GetAllTaskByActivityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAllTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAllTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAllTask(ctx, req.(*task.GetAllTaskByActivityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.UpdateTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateTask(ctx, req.(*task.UpdateTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_BatchUpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.BatchUpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BatchUpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_BatchUpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BatchUpdateTask(ctx, req.(*task.BatchUpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(task.DeleteTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteTask(ctx, req.(*task.DeleteTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(text.CreateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateText(ctx, req.(*text.CreateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(text.GetTextByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetText(ctx, req.(*text.GetTextByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetAllText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(text.GetAllTextByActivityIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetAllText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetAllText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetAllText(ctx, req.(*text.GetAllTextByActivityIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(text.UpdateTextByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateText(ctx, req.(*text.UpdateTextByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(text.DeleteTextByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteText(ctx, req.(*text.DeleteTextByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _AuthService_CreateActivity_Handler,
		},
		{
			MethodName: "GetActivity",
			Handler:    _AuthService_GetActivity_Handler,
		},
		{
			MethodName: "GetAllActivity",
			Handler:    _AuthService_GetAllActivity_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _AuthService_UpdateActivity_Handler,
		},
		{
			MethodName: "DeleteActivity",
			Handler:    _AuthService_DeleteActivity_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _AuthService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AuthService_GetTask_Handler,
		},
		{
			MethodName: "GetAllTask",
			Handler:    _AuthService_GetAllTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _AuthService_UpdateTask_Handler,
		},
		{
			MethodName: "BatchUpdateTask",
			Handler:    _AuthService_BatchUpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _AuthService_DeleteTask_Handler,
		},
		{
			MethodName: "CreateText",
			Handler:    _AuthService_CreateText_Handler,
		},
		{
			MethodName: "GetText",
			Handler:    _AuthService_GetText_Handler,
		},
		{
			MethodName: "GetAllText",
			Handler:    _AuthService_GetAllText_Handler,
		},
		{
			MethodName: "UpdateText",
			Handler:    _AuthService_UpdateText_Handler,
		},
		{
			MethodName: "DeleteText",
			Handler:    _AuthService_DeleteText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}
