syntax = "proto3";

package proto;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "payload_messages.proto";
import "activity/payload_messages.proto";
import "task/payload_messages.proto";
import "text/payload_messages.proto";
import "google/protobuf/empty.proto";

option go_package = "./stubs";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
      security: {
              key: "Bearer"
              value: {
                  type: TYPE_API_KEY
                  in: IN_HEADER
                  name: "Authorization"
                  description: "Authentication token, prefixed by Bearer: Bearer <token>"
              }
      }
  }
  security: {
      security_requirement: {
          key: "Bearer"
      }
  }
  info: {
    title: "Todo Gateway",
    version: "v1.0.0"
  }
  consumes: "application/json"
  produces: "application/json"
};

service AuthService {
  // Auth
  rpc Login (LoginRequest) returns (AuthBaseResponse) {
    option (google.api.http) = {
      post: "/todo-gateway/api/v1/auth/login",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        security: {}
        tags: ["Auth"]
        summary: "login"
        description: "This API for login"
    };
  }

  rpc Logout (google.protobuf.Empty) returns (AuthBaseResponse) {
    option (google.api.http) = {
      post: "/todo-gateway/api/v1/auth/logout",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["Auth"]
        summary: "User logout"
        description: "This API for user logout"
    };
  }

  // Activities
  rpc CreateActivity(CreateActivityRequest) returns (ActivityBaseResponse) {
      option (google.api.http) = {
          post: "/todo-gateway/api/v1/activities",
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Activities"]
          summary: "Create activity"
          description: "This API for create activity"
      };
  };

  rpc GetActivity(GetActivityByIDRequest) returns (ActivityBaseResponse) {
      option (google.api.http) = {
          get: "/todo-gateway/api/v1/activities/{id}",
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Activities"]
          summary: "Get activity by id"
          description: "This API for get activity by id"
      };
  };

  rpc GetAllActivity(GetAllActivityRequest)returns (GetAllActivityResponse) {
      option (google.api.http) = {
          get: "/todo-gateway/api/v1/activities",
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Activities"]
          summary: "Get all activity"
          description: "This API for get all activity"
      };
  };

  rpc UpdateActivity(UpdateActivityByIDRequest) returns (ActivityBaseResponse) {
      option (google.api.http) = {
          patch: "/todo-gateway/api/v1/activities/{id}",
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Activities"]
          summary: "Update activity by id"
          description: "This API for update activity by id"
      };
  };

  rpc DeleteActivity(DeleteActivityByIDRequest) returns (ActivityBaseResponse) {
      option (google.api.http) = {
          delete: "/todo-gateway/api/v1/activities/{id}",
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Activities"]
          summary: "Delete activity by id"
          description: "This API for delete activity by id"
      };
  };

  // Taks
  rpc CreateTask(CreateTaskRequest) returns (TaskBaseResponse) {
      option (google.api.http) = {
          post: "/todo-gateway/api/v1/tasks",
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Tasks"]
          summary: "Create task"
          description: "This API for create task"
      };
  };

  rpc GetTask(GetTaskByIDRequest) returns (GetTaskByIDResponse) {
      option (google.api.http) = {
          get: "/todo-gateway/api/v1/tasks/{id}",
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Tasks"]
          summary: "Get task by id"
          description: "This API for get task by id"
      };
  };

  rpc GetAllTask(GetAllTaskByActivityIDRequest)returns (GetAllTaskByActivityIDResponse) {
      option (google.api.http) = {
          get: "/todo-gateway/api/v1/tasks",
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Tasks"]
          summary: "Get all task"
          description: "This API for get all task"
      };
  };

  rpc UpdateTask(UpdateTaskByIDRequest) returns (TaskBaseResponse) {
      option (google.api.http) = {
          patch: "/todo-gateway/api/v1/tasks/{id}",
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Tasks"]
          summary: "Update task by id"
          description: "This API for update task by id"
      };
  };

  rpc BatchUpdateTask(BatchUpdateTaskRequest) returns (TaskBaseResponse) {
      option (google.api.http) = {
          patch: "/todo-gateway/api/v1/tasks/batch",
          body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Tasks"]
          summary: "Batch update task"
          description: "This API for batch update task"
      };
  };

  rpc DeleteTask(DeleteTaskByIDRequest) returns (TaskBaseResponse) {
      option (google.api.http) = {
          delete: "/todo-gateway/api/v1/tasks/{id}",
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          tags: ["Tasks"]
          summary: "Delete task by id"
          description: "This API for delete task by id"
      };
  };

//Text
  rpc CreateText(CreateTextRequest) returns (TextBaseResponse) {
        option (google.api.http) = {
            post: "/todo-gateway/api/v1/text",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Text"]
            summary: "Create text"
            description: "This API for creating text"
        };
    }

    rpc GetText(GetTextByIDRequest) returns (GetTextByIDResponse) {
        option (google.api.http) = {
            get: "/todo-gateway/api/v1/text/{id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Text"]
            summary: "Get text by id"
            description: "This API for getting text by id"
        };
    }

    rpc GetAllText(GetAllTextByActivityIDRequest) returns (GetAllTextByActivityIDResponse) {
        option (google.api.http) = {
            get: "/todo-gateway/api/v1/texts",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Text"]
            summary: "Get all texts "
            description: "This API for get all task"
        };
    }

    rpc UpdateText(UpdateTextByIDRequest) returns (TextBaseResponse) {
        option (google.api.http) = {
            patch: "/todo-gateway/api/v1/text/{id}",
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Text"]
            summary: "Update text by id"
            description: "This API for updating text by id"
        };
    }

    rpc DeleteText(DeleteTextByIDRequest) returns (TextBaseResponse) {
        option (google.api.http) = {
            delete: "/todo-gateway/api/v1/text/{id}",
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Text"]
            summary: "Delete text by id"
            description: "This API for deleting text by id"
        };
    }
}
